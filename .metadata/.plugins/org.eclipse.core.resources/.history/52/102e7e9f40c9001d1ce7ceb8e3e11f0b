package controllers;

import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import application.DBConnection;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import sqlData.Product;

public class InventoryUpdateDialogController implements Initializable {

    @FXML
    private Spinner<Integer> idSpinner;
    @FXML
    private TextField nameField;
    @FXML
    private TextField priceField;
    @FXML
    private Spinner<Integer> stockLevelSpinner;
    @FXML
    private Button update;
    @FXML
    private Button cancel;

    private Product product;
	private Product updatedProduct;
    

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // Set the initial values of the text fields and spinners
        idSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, Integer.MAX_VALUE,
                product != null ? product.getId() : 1));
        nameField.setText(product != null ? product.getName() : "");
        priceField.setText(product != null ? Double.toString(product.getPrice()) : "");
        stockLevelSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, Integer.MAX_VALUE,
                product != null ? product.getStockLevel() : 0));
        
        	
    }

    public void setProduct(Product product) {
        this.product = product;
        if (product != null) {
            setIdSpinnerValue(product.getId());
            setNameFieldValue(product.getName());
            setPriceFieldValue(product.getPrice());
            setStockLevelSpinnerValue(product.getStockLevel());
        }
    }

    public void setIdSpinnerValue(int id) {
        idSpinner.getValueFactory().setValue(id);
    }

    public void setNameFieldValue(String name) {
        nameField.setText(name);
    }

    public void setPriceFieldValue(double price) {
        priceField.setText(Double.toString(price));
    }

    public void setStockLevelSpinnerValue(int stockLevel) {
        stockLevelSpinner.getValueFactory().setValue(stockLevel);
    }

    public int getIdSpinnerValue() {
        return idSpinner.getValue();
    }

    public String getNameFieldValue() {
        return nameField.getText();
    }

    public double getPriceFieldValue() {
        return Double.parseDouble(priceField.getText());
    }

    public int getStockLevelSpinnerValue() {
        return stockLevelSpinner.getValue();
    }


    public void updateProduct() {
        // Retrieve the data from the UI
        int id = getIdSpinnerValue();
        String name = getNameFieldValue();
        double price = getPriceFieldValue();
        int stockLevel = getStockLevelSpinnerValue();

        // Create a new Product object with the updated data
        updatedProduct = new Product(id, name, price, stockLevel);
        
        // Update the database with the new product details
        DBConnection.connectToDB();
        String sql = "UPDATE inventory SET product_name = ?, price = ?, stock = ? WHERE productid = ?";
        try (PreparedStatement statement = DBConnection.connection.prepareStatement(sql)) {
            statement.setString(1, updatedProduct.getName());
            statement.setDouble(2, updatedProduct.getPrice());
            statement.setInt(3, updatedProduct.getStockLevel());
            statement.setInt(4, updatedProduct.getId());
            statement.executeUpdate();
        } catch (SQLException ex) {
            // Handle any SQL exceptions that occur
            ex.printStackTrace();
        } finally {
            DBConnection.disconnectToDB();
        }
        
        JOptionPane.showMessageDialog(null,"Updated Successfully!");

        // TODO: Save the updated product to the database or update an existing record

        // Close the dialog
        closeDialog();
        


    }
    

    private void closeDialog() {
        // Retrieve the stage from the update button
        Stage stage = (Stage) update.getScene().getWindow();

        // Close the stage
        stage.close();
    }
    
    @FXML
    private void handleUpdateButtonAction(ActionEvent event) {
        updateProduct();
    }

    
}
